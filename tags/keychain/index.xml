<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>keychain on DEV LOG</title>
    <link>/tags/keychain/</link>
    <description>Recent content in keychain on DEV LOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 26 Jun 2018 10:19:55 +0000</lastBuildDate>
    
        <atom:link href="/tags/keychain/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>iOS / study / Accessing Keychain Items with Face ID or Touch ID (2)</title>
      <link>/posts/180626-2/</link>
      <pubDate>Tue, 26 Jun 2018 10:19:55 +0000</pubDate>
      
      <guid>/posts/180626-2/</guid>
      <description>Accessing Keychain Items with Face ID or Touch ID : 바이오메트릭정보로 키체인 아이템에 접근(Add, Read, Delete)하기 Origin: Apple Developer Document
Create an Access Control SecAccessControl To create a protected keychain item, begin by creating a SecAccessControl instance:
보호된 키체인아이템을 생성하기 위해서 SecAccessControl 인스턴스를 생성함. let access = SecAccessControlCreateWithFlags(nil, // Use the default allocator. kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly, .userPresence, nil) // Ignore any error. kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly The access control instance contains restrictions along two dimensions: accessibility and authentication.</description>
    </item>
    
    <item>
      <title>iOS / study / Accessing Keychain Items with Face ID or Touch ID (1)</title>
      <link>/posts/180626-1/</link>
      <pubDate>Tue, 26 Jun 2018 09:46:00 +0000</pubDate>
      
      <guid>/posts/180626-1/</guid>
      <description>Accessing Keychain Items with Face ID or Touch ID : 바이오메트릭정보로 키체인 아이템에 접근(Add, Read, Delete)하기 Origin: Apple Developer Document
Overview 개요 Keychain Items When you store a secure item like a password or a private key in the keychain, you dictate the conditions under which that item can be accessed later. Among other things, you can tell keychain services that every time it tries to read the item, it should first seek the user’s permission—for example, by authenticating the user biometrically with Face ID or Touch ID.</description>
    </item>
    
  </channel>
</rss>